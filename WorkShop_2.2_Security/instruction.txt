Instruction for Workshop 2.2 Kubernetes Security:
Note: This instruction will start lab for kubernetes's cluster for real workshop:
============================================================================================================================================================
Part 1: Network Policy
============================================================================================================================================================
1. Create Application Set by command:
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/management-ui-set.yml
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/backend-set.yml
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/frontend-set.yml
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/client-set.yml

2. Check Namespace / Service / Pods 
	kubectl get namespace
	kubectl get all -n=management-ui 
	kubectl get all -n=stars
	kubectl get all -n=client

3. Test open browser for check application:
	http://<Public IP>:32500

4. Apply network policy for denied any connection to namespace: "stars" and "client"
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/policy-deny-client.yml
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/policy-deny-stars.yml

5. Test open browser again:
	http://<Publi IP>:32500

6. Apply network policy for allow all pods from namespace "management-ui" (label: role=management-ui) access to any pods in namespace "stars"
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/policy-allow-ui.yml

7. Apply network policy for allow all pods from namespace "management-ui" (label: role=management-ui) access to any pods in namespace "client"
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/policy-allow-ui-client.yml

8. Test open browser again:
	http://<Publi IP>:32500

9. Apply network policy for allow pods frontend (label: role=frontend) to pods backend (label: role=backend) in same namespace
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/policy-allow-backend.yml

10. Apply network policy for allow all pods from namespace "client" (label: role=client) access to pods frontend (label: role=frontend)
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/policy-allow-frontend.yml

11. Test open browser again:
	http://<Publi IP>:32500

12. CleanUp Lab by command:
	kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/management-ui-set.yml
	kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/backend-set.yml
	kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/frontend-set.yml
	kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/client-set.yml


============================================================================================================================================================
Part 2: Access Control Policy (User Account)
============================================================================================================================================================

1. Create namespace "security" and deploy application via command:
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/security-namespace.yml
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/security-pod.yml
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/security-svc.yml
	kubectl get pod,svc -n=sec
	


1. Create private key for new user account
cd ~
openssl genrsa -out labreadonly.key 2048

2. Create CSR from private key (User: labreadonly, OU: labdockerthailand)
openssl req -new -key labreadonly.key -out labreadonly.csr -subj "/CN=labreadonly/O=labdockerthailand"

3. Generate Certificate base on CSR with aging 365 days
openssl x509 -req -in labreadonly.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out labreadonly.crt -days 365

4. Private key and Public key will place on /home/ubuntu (~)

5. Setup credential context via kubectl by command:
kubectl config set-credentials labreadonly --client-certificate=~/labreadonly.crt  --client-key=~/labreadonly.key
kubectl config set-context labreadonly-context --cluster=kubernetes --namespace=security --user=employee

6. Test use credential for operate by command: (Expect: Access Denied)
kubectl --context=labreadonly-context get pods

7. Create Role "ReadOnly" by command:
kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/policy-role-readonly.yml

8. Create RoleBinding for user "labreadonly" with role "rolereadonly"
kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/policy-role-readonly.yml


