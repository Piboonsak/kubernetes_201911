Instruction for Workshop 2.2 Kubernetes Security:
Note: This instruction will start lab for kubernetes's cluster for real workshop:
============================================================================================================================================================
Part 1: Network Policy
============================================================================================================================================================
1. Create Application Set by command:
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/management-ui-set.yml
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/backend-set.yml
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/frontend-set.yml
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/client-set.yml

2. Check Namespace / Service / Pods 
	kubectl get namespace
	kubectl get all -n=management-ui 
	kubectl get all -n=stars
	kubectl get all -n=client

3. Test open browser for check application:
	http://<Public IP>:32500

4. Apply network policy for denied any connection to namespace: "stars" and "client"
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/policy-deny-client.yml
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/policy-deny-stars.yml

5. Test open browser again:
	http://<Publi IP>:32500

6. Apply network policy for allow all pods from namespace "management-ui" (label: role=management-ui) access to any pods in namespace "stars"
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/policy-allow-ui.yml

7. Apply network policy for allow all pods from namespace "management-ui" (label: role=management-ui) access to any pods in namespace "client"
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/policy-allow-ui-client.yml

8. Test open browser again:
	http://<Publi IP>:32500

9. Apply network policy for allow pods frontend (label: role=frontend) to pods backend (label: role=backend) in same namespace
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/policy-allow-backend.yml

10. Apply network policy for allow all pods from namespace "client" (label: role=client) access to pods frontend (label: role=frontend)
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/policy-allow-frontend.yml

11. Test open browser again:
	http://<Publi IP>:32500

12. CleanUp Lab by command:
	kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/management-ui-set.yml
	kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/backend-set.yml
	kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/frontend-set.yml
	kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/client-set.yml


============================================================================================================================================================
Part 2: Access Control Policy (User Account)
============================================================================================================================================================

1. Create namespace "security" and deploy application via command:
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/security-namespace.yml
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/security-pod.yml
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/security-svc.yml
	kubectl get pod,svc -n=security
	curl http://<Private IP>:32500

2. Configure Openssl and Create private key for new user account
cd ~
sudo sed -i '/RANDFILE/d' /etc/ssl/openssl.cnf
openssl genrsa -out labreadonly.key 2048

3. Create CSR from private key (User: labreadonly, OU: labdockerthailand)
openssl req -new -key labreadonly.key -out labreadonly.csr -subj "/CN=labreadonly/O=labdockerthailand"


4. Generate Certificate base on CSR with aging 365 days
sudo openssl x509 -req -in labreadonly.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out labreadonly.crt -days 365

5. Private key and Public key will place on /home/ubuntu (~)
ls ~/labreadonly*

5. Setup credential context via kubectl by command:
cd ~
cp ~/.kube/config ~/.kube/config_backup
kubectl config set-credentials labreadonly --client-certificate=/home/ubuntu/labreadonly.crt  --client-key=/home/ubuntu/labreadonly.key
kubectl config set-context labreadonly-context --cluster=kubernetes --namespace=security --user=labreadonly

6. Test use credential for operate by command: (Expect: Forbidden)
kubectl --context=labreadonly-context get pods

7. Create Role "ReadOnly" by command:
kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/security-role-readonly.yml
kubectl get roles -n=security

8. Create RoleBinding for user "labreadonly" with role "rolereadonly"
kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/security-rolebinding-labsecurity.yml
kubectl get rolebinding -n=security

9. Try to get pods again.
kubectl --context=labreadonly-context get pods

10. Try to get svc,delete pods/create new pods: (Expect: Forbidden)
kubectl --context=labreadonly-context get svc
kubectl --context=labreadonly-context delete pods/webtest
kubectl --context=labreadonly-context run webtest --image=labdocker/nginx:http2 --port=443 -n=security

11. CleanUp Lab:
kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/security-rolebinding-labsecurity.yml
kubectl config delete-context labreadonly-context

============================================================================================================================================================
Part 3: Access Control Policy (System Account)
============================================================================================================================================================
1. Create Service Account by command:
kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/security-serviceaccount-readonly.yml
kubectl get sa -n=security

2. Create RoleBinding by command:
kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/security-rolebinding-serviceaccountreadonly.yml
kubectl get clusterrole |grep clusterrolereadonly
kubectl get rolebinding -n=security

3. Get secret of service account by command:
kubectl get secrets -n=security	==> Check secret for user "serviceaccount-readonly"
kubectl describe secret/serviceaccount-readonly-token-xxxxx -n=security	==> Record for token
-----
example:
Data
====
ca.crt:     1025 bytes
namespace:  7 bytes
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IjRDekxqMXZhU19sU09zM3FZSHBtOS01WWF6WGljelE0Z1F0dXNheUdaVGMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJzZWN1cml0eSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJzZXJ2aWNlYWNjb3VudC1yZWFkb25seS10b2tlbi1qbHB4NiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJzZXJ2aWNlYWNjb3VudC1yZWFkb25seSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImU0ZDZmYTFjLTFlNTAtNDc2Mi04MDRkLWFhNmFiMjNhMWJmZSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpzZWN1cml0eTpzZXJ2aWNlYWNjb3VudC1yZWFkb25seSJ9.kS3m6-_ExVnekjZRg69zGRdUHarBsDq7_kPxT5n-zbYKXj-bRQ0CyUEMIcwpRLmpjp4mYbVED2Vlm_oTyZ0gnJFcpBY4TJrEHhYJVFkxmaf3dM1kklVODz8VqMhcwTYMq2x1rexSOpOYHrxFBmC2POwNBDo7EOkCdL2WH-MGo-lg7VrrJMkB-h57lBh9ll1wqkVjspevO8a7RVIkRqGfG_NEBJ-4jENGq56RvpOooXdxI2Ye-f78KHkcxLZ5-HECbDIN6_DPJocBmygV19S38quw27H-hnP8f1EDxyPr_663OY_Q_02gRiZvtviW9lmqloHuMljU-3L4KlMBz-rDTw
-----

4. Create pods for service account by command:
kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/security-pod-serviceaccount.yml
kubectl get pods -n=security

5. Access to pods, install curl and export TOKEN with command:
kubectl exec -it serviceaccount sh -n=security
apk update && apk add --update curl
export TOKEN=<TOKEN>

6. Test curl for access kubernetes's service by command:
curl https://kubernetes.default/api/v1/ --insecure -H 'Authorization: Bearer $TOKEN'

curl -H 'Authorization: Bearer $TOKEN' https://kubernetes.default/api/v1/namespaces/security/pods/ --insecure 


7. Clearup Lab by command:
kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/security-pod-serviceaccount.yml
kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/security-rolebinding-serviceaccountreadonly.yml
kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/security-role-readonly.yml
kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/security-serviceaccount-readonly.yml
kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/security-namespace.yml
kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/security-pod.yml
kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_201911/master/WorkShop_2.2_Security/security-svc.yml